/*!
  \file CodeWordFile.h
  \author Tomislav Nad, Tomislav.Nad@iaik.tugraz.at
  \version 0.9
  \brief This is the header file of the class CodeWordFile.
*/
// Copyright (c) 2010 Graz University of Technology (IAIK) <http://www.iaik.tugraz.at>
//  
// This file is part of the CodingTool.
//
// The CodingTool is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// CodingTool is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with CodingTool.  If not, see <http://www.gnu.org/licenses/>.

#ifndef CODEWORDFILE_H_
#define CODEWORDFILE_H_

#include <vector>
#include <fstream>
#include <iostream>
#include <sstream>
#include <string>
#include <cassert>

#include "types.h"
#include "Parameters.h"
#include "CodeWord.h"


//! This class reads and writes files containing code words.
/*! 
  This class handles files containing code words generated by
  LowWeightSearch::CanteautChabaud. The parameters used for
  the search are also written to the file. \n
  The format of such files is:\n\n
  
  \%BEGIN\n
   list of integer parameters used to find code words\n
  \%STRING\n
   list of string parameters used to find code words\n
  \%END\n
  hamming_weight2 code_word2\n
  hamming_weight2 code_word2\n
  .\n
  .\n
  .\n
  hamming_weightn code_wordn\n
  \n
  \n
  If the class is used to read a file then the parameters and code words are read from file.
  If the class is used to write to a file then first the parameters are written.
  Afterwards CodeWordFile::WriteCodeWord has to be used to write a code word directly into the file
  after the header.

  \see Parameters
  \see LowWeightSearch
*/
class CodeWordFile {
public:
	//! This is a list holding code words.
	/*!
	  This type definition is only used in context with a CodeWordFile object.
	*/
    typedef std::vector<CodeWord> CodeWordList;

	//! Constructor.
	/*!
	  Does nothing special.
	*/
	CodeWordFile();

	//! Constructor.
	/*!
	  \param sFileName Sets the filename.
	*/
	CodeWordFile(std::string & sFileName);

	//! Destructor.
	/*!
	  Does nothing special.
	*/
	virtual ~CodeWordFile(void);

	//! Reads a code word file.
    /*! 
      Reads the header and the code words from the given file.
	  \param sFileName The filename.
	  \return True if the file was successfully read.
    */
	bool Read(const std::string & sFileName);

	//! Writes the header to the file.
    /*! 
      After CodeWord::Write is called, one can add code words to the
	  file using CodeWord::WriteCodeWord. If
	  the filename does not exist an error is printed.
	  \param sFileName The filename.
	  \return True if header was successfully written.
    */
	bool Write(const std::string & sFileName);

	//! Writes the code word to the file.
    /*! 
      The file has to be specified either by CodeWord::Write or by 
	  CodeWord::SetFileName.
	  The Hamming weight is written first. The code word is written
	  bit-wise, where bits are separated by a whitespace.
	  \param oCodeWord the code word.
	  \return True if data was successfully written.
    */
	// files are written directly to the file
	bool WriteCodeWord(const CodeWord & oCodeWord);

	//! Adds text to the beginning of the file.
	/*!
      Adds the provided text at the beginning of the header.

	  \param sText The provided text.
	*/
	void AddText(const std::string & sText);

	//! Sets the filename.
    /*! 
	  \param sName The filename.
    */
	void SetFileName(const std::string & sName);

	//! Sets the parameter object.
    /*! 
	  This method sets the object with the parameters
	  used by the library.
	  \param oParameters The parameter object.
    */
	void SetParameters(const Parameters & oParameters);

	//! Returns the parameters.
    /*! 
      \return The parameters used for the generated code words.
    */
	const Parameters & GetParameters();

	//! Return the filename.
    /*! 
      \return The filename.
    */
	const std::string & GetFileName();

	//! Returns the list of code words from a file.
    /*! 
      \return The list of code words.
    */
	const CodeWordList & GetCodeWords();

private:

	//! Reads the header from the file.
    /*! 
      \param oFileStream The file stream object.
	  \return True if the file was successfully read.
    */
	bool ReadHeader(std::fstream & oFileStream);

	//! Reads the code words from the file.
    /*! 
	  The code words are stored in a CodeWordList.
      \param oFileStream The file stream object.
    */
	void ReadCodeWords(std::fstream & oFileStream);

	//! Writes the header to the file.
    /*! 
      \param oFileStream The file stream object.
    */
	void WriteHeader(std::fstream & oFileStream);

	Parameters   m_oParameters;    //!< The parameters.
	CodeWordList m_oCodeWordList;  //!< The list of code words.
	std::string  m_sFileName;      //!< The filename.
	std::string  m_sText;          //!< some text at the beginning of the header.

};

#endif
